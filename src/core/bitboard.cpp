#include "bitboard.h"

// ================== BITBOARD CONSTANT DEFINITIONS =======================

//Array containing bitboard for each square (1 << sq)
const Bitboard SQUAREBB[64] = {
    0x1, 0x2, 0x4, 0x8,
    0x10, 0x20, 0x40, 0x80,
    0x100, 0x200, 0x400, 0x800,
    0x1000, 0x2000, 0x4000, 0x8000,
    0x10000, 0x20000, 0x40000, 0x80000,
    0x100000, 0x200000, 0x400000, 0x800000,
    0x1000000, 0x2000000, 0x4000000, 0x8000000,
    0x10000000, 0x20000000, 0x40000000, 0x80000000,
    0x100000000, 0x200000000, 0x400000000, 0x800000000,
    0x1000000000, 0x2000000000, 0x4000000000, 0x8000000000,
    0x10000000000, 0x20000000000, 0x40000000000, 0x80000000000,
    0x100000000000, 0x200000000000, 0x400000000000, 0x800000000000,
    0x1000000000000, 0x2000000000000, 0x4000000000000, 0x8000000000000,
    0x10000000000000, 0x20000000000000, 0x40000000000000, 0x80000000000000,
    0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000,
    0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
};

//file masks
const Bitboard MASKFILE[8] = {
    0x101010101010101, 0x202020202020202, 0x404040404040404, 0x808080808080808,
    0x1010101010101010, 0x2020202020202020, 0x4040404040404040, 0x8080808080808080,
};

//rank masks
const Bitboard MASKRANK[8] = {
    0xff, 0xff00, 0xff0000, 0xff000000,
    0xff00000000, 0xff0000000000, 0xff000000000000, 0xff00000000000000
};

//for using in Pawn Structure
const Bitboard MASKPASSED[2][64] = {
    { // WHITE
        0x0303030303030300ULL, 0x0707070707070700ULL, 0x0e0e0e0e0e0e0e00ULL, 0x1c1c1c1c1c1c1c00ULL, 0x3838383838383800ULL, 0x7070707070707000ULL, 0xe0e0e0e0e0e0e000ULL, 0xc0c0c0c0c0c0c000ULL, 
        0x0303030303030000ULL, 0x0707070707070000ULL, 0x0e0e0e0e0e0e0000ULL, 0x1c1c1c1c1c1c0000ULL, 0x3838383838380000ULL, 0x7070707070700000ULL, 0xe0e0e0e0e0e00000ULL, 0xc0c0c0c0c0c00000ULL, 
        0x0303030303000000ULL, 0x0707070707000000ULL, 0x0e0e0e0e0e000000ULL, 0x1c1c1c1c1c000000ULL, 0x3838383838000000ULL, 0x7070707070000000ULL, 0xe0e0e0e0e0000000ULL, 0xc0c0c0c0c0000000ULL, 
        0x0303030300000000ULL, 0x0707070700000000ULL, 0x0e0e0e0e00000000ULL, 0x1c1c1c1c00000000ULL, 0x3838383800000000ULL, 0x7070707000000000ULL, 0xe0e0e0e000000000ULL, 0xc0c0c0c000000000ULL, 
        0x0303030000000000ULL, 0x0707070000000000ULL, 0x0e0e0e0000000000ULL, 0x1c1c1c0000000000ULL, 0x3838380000000000ULL, 0x7070700000000000ULL, 0xe0e0e00000000000ULL, 0xc0c0c00000000000ULL, 
        0x0303000000000000ULL, 0x0707000000000000ULL, 0x0e0e000000000000ULL, 0x1c1c000000000000ULL, 0x3838000000000000ULL, 0x7070000000000000ULL, 0xe0e0000000000000ULL, 0xc0c0000000000000ULL, 
        0x0300000000000000ULL, 0x0700000000000000ULL, 0x0e00000000000000ULL, 0x1c00000000000000ULL, 0x3800000000000000ULL, 0x7000000000000000ULL, 0xe000000000000000ULL, 0xc000000000000000ULL, 
        0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 
    },
    { // BLACK
        0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 0x0000000000000000ULL, 
        0x0000000000000003ULL, 0x0000000000000007ULL, 0x000000000000000eULL, 0x000000000000001cULL, 0x0000000000000038ULL, 0x0000000000000070ULL, 0x00000000000000e0ULL, 0x00000000000000c0ULL, 
        0x0000000000000303ULL, 0x0000000000000707ULL, 0x0000000000000e0eULL, 0x0000000000001c1cULL, 0x0000000000003838ULL, 0x0000000000007070ULL, 0x000000000000e0e0ULL, 0x000000000000c0c0ULL, 
        0x0000000000030303ULL, 0x0000000000070707ULL, 0x00000000000e0e0eULL, 0x00000000001c1c1cULL, 0x0000000000383838ULL, 0x0000000000707070ULL, 0x0000000000e0e0e0ULL, 0x0000000000c0c0c0ULL, 
        0x0000000003030303ULL, 0x0000000007070707ULL, 0x000000000e0e0e0eULL, 0x000000001c1c1c1cULL, 0x0000000038383838ULL, 0x0000000070707070ULL, 0x00000000e0e0e0e0ULL, 0x00000000c0c0c0c0ULL, 
        0x0000000303030303ULL, 0x0000000707070707ULL, 0x0000000e0e0e0e0eULL, 0x0000001c1c1c1c1cULL, 0x0000003838383838ULL, 0x0000007070707070ULL, 0x000000e0e0e0e0e0ULL, 0x000000c0c0c0c0c0ULL, 
        0x0000030303030303ULL, 0x0000070707070707ULL, 0x00000e0e0e0e0e0eULL, 0x00001c1c1c1c1c1cULL, 0x0000383838383838ULL, 0x0000707070707070ULL, 0x0000e0e0e0e0e0e0ULL, 0x0000c0c0c0c0c0c0ULL, 
        0x0003030303030303ULL, 0x0007070707070707ULL, 0x000e0e0e0e0e0e0eULL, 0x001c1c1c1c1c1c1cULL, 0x0038383838383838ULL, 0x0070707070707070ULL, 0x00e0e0e0e0e0e0e0ULL, 0x00c0c0c0c0c0c0c0ULL, 
    }
};


//contains all bits set for the ranks from start to end
const Bitboard BBRANKSPAN[8][8] = {
    {0x00000000000000ffULL, 0x000000000000ffffULL, 0x0000000000ffffffULL, 0x00000000ffffffffULL, 0x000000ffffffffffULL, 0x0000ffffffffffffULL, 0x00ffffffffffffffULL, 0xffffffffffffffffULL},
    {0x000000000000ffffULL, 0x000000000000ff00ULL, 0x0000000000ffff00ULL, 0x00000000ffffff00ULL, 0x000000ffffffff00ULL, 0x0000ffffffffff00ULL, 0x00ffffffffffff00ULL, 0xffffffffffffff00ULL},
    {0x0000000000ffffffULL, 0x0000000000ffff00ULL, 0x0000000000ff0000ULL, 0x00000000ffff0000ULL, 0x000000ffffff0000ULL, 0x0000ffffffff0000ULL, 0x00ffffffffff0000ULL, 0xffffffffffff0000ULL},
    {0x00000000ffffffffULL, 0x00000000ffffff00ULL, 0x00000000ffff0000ULL, 0x00000000ff000000ULL, 0x000000ffff000000ULL, 0x0000ffffff000000ULL, 0x00ffffffff000000ULL, 0xffffffffff000000ULL},
    {0x000000ffffffffffULL, 0x000000ffffffff00ULL, 0x000000ffffff0000ULL, 0x000000ffff000000ULL, 0x000000ff00000000ULL, 0x0000ffff00000000ULL, 0x00ffffff00000000ULL, 0xffffffff00000000ULL},
    {0x0000ffffffffffffULL, 0x0000ffffffffff00ULL, 0x0000ffffffff0000ULL, 0x0000ffffff000000ULL, 0x0000ffff00000000ULL, 0x0000ff0000000000ULL, 0x00ffff0000000000ULL, 0xffffff0000000000ULL},
    {0x00ffffffffffffffULL, 0x00ffffffffffff00ULL, 0x00ffffffffff0000ULL, 0x00ffffffff000000ULL, 0x00ffffff00000000ULL, 0x00ffff0000000000ULL, 0x00ff000000000000ULL, 0xffff000000000000ULL},
    {0xffffffffffffffffULL, 0xffffffffffffff00ULL, 0xffffffffffff0000ULL, 0xffffffffff000000ULL, 0xffffffff00000000ULL, 0xffffff0000000000ULL, 0xffff000000000000ULL, 0xff00000000000000ULL}
};

//diagonal masks
const Bitboard MASKDIAGONAL[15] = {
    0x80, 0x8040, 0x804020,
    0x80402010, 0x8040201008, 0x804020100804,
    0x80402010080402, 0x8040201008040201, 0x4020100804020100,
    0x2010080402010000, 0x1008040201000000, 0x804020100000000,
    0x402010000000000, 0x201000000000000, 0x100000000000000,
};

//anti-diagonal masks
const Bitboard MASKANTIDIAGONAL[15] = {
    0x1, 0x102, 0x10204,
    0x1020408, 0x102040810, 0x10204081020,
    0x1020408102040, 0x102040810204080, 0x204081020408000,
    0x408102040800000, 0x810204080000000, 0x1020408000000000,
    0x2040800000000000, 0x4080000000000000, 0x8000000000000000
};

void printBitboard(Bitboard bb) {
    for (int rank = 7; rank >= 0; --rank) {
        std::cout << (rank + 1) << "  ";
        for (int file = 0; file < 8; ++file) {
            Square sq = makesquare(File(file), Rank(rank));
            std::cout << (getbit(bb, sq) ? "1 " : ". ");
        }
        std::cout << "\n";
    }
    std::cout << "\n   a b c d e f g h\n\n";
    std::cout << "Bitboard: 0x" << std::hex << bb << std::dec << "\n";
}
